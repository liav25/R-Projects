pedestrians <- serious_accidents %>% group_by(accident_year,accident_severity, pedestrian_involved) %>% summarize(total = sum(X))
#create the ggplot
p = ggplot(pedestrians, aes(x=accident_year,y=total, fill=accident_severity)) +  geom_bar(stat = "identity", position = "dodge") +
#split by pedestrians involvment and scaling axis
facet_wrap(.~pedestrian_involved) + scale_x_continuous("Year", labels = as.character(pedestrians$accident_year), breaks =pedestrians$accident_year) + scale_y_continuous("Year") +
#designing the graph a bit
theme(title = element_text(size=20), strip.text = element_text(size=15, color="grey3"), axis.text = element_text(size =15), axis.title = element_text(size=15), legend.text=element_text(size=15))+
geom_text(aes(label=total), vjust=-0.5, color="black",
position = position_dodge(1), size=4) + theme(axis.text.x = element_text(angle=0, vjust=1)) + ggtitle("Serious Accidents Per Year") + guides(fill=guide_legend(title="Severity"), size=10)
#print the plot in a big resolution
p
#create an is_pedestrian_involved column
accidents.new$pedestrian_involved =  ifelse(accidents.new$accident_type_hebrew == "פגיעה בהולך רגל","Pedestrian Involved","No Pedestrians Involved")
#create a table of pedestrians-involved accidents by streets
streets_pedestrians = accidents.new %>%  group_by(street1_hebrew) %>% summarize(total = sum(ifelse(pedestrian_involved=="Pedestrian Involved",1,0)))
#sum the total accidents on each street
streets = accidents.new %>%  group_by(street1_hebrew) %>% summarize(total = sum(X))
#merge tables
streets_merged = merge(streets, streets_pedestrians, by = "street1_hebrew")
#fix colnames
colnames(streets_merged) = c("street","accidents", "pedestrian_accidents")
#filter the below 100 total accidents
streets_merged_over_100 = filter(streets_merged, accidents>100)
#create ratio column
streets_merged_over_100$ratio = streets_merged_over_100$pedestrian_accidents/streets_merged_over_100$accidents
#find the maximum ratio street
max_ratio_road = streets_merged_over_100[which.max(streets_merged_over_100$ratio),1]
#create the plot using dplyr for building the legend
accidents %>% mutate(color = ifelse(street1_hebrew==max_ratio_road, "highest pedestrians accident ratio road", ifelse(accident_severity =="קטלנית", 'תאונה קטלנית', 'תאונה'))) %>%
ggplot(aes(x=longitude, y=latitude, size = ifelse(street1_hebrew==max_ratio_road , 2  ,ifelse(accident_severity == "קטלנית",3.5,1)) ,color=color)) + geom_point(alpha=0.6) +
theme_light() + theme(legend.position = "bottom", title=element_text(size=20),axis.text = element_text(size=15), legend.text = element_text(size=20)) +
ggtitle("Accidents Across Tel Aviv") + scale_color_manual(values = c("blue","grey50","red")) +scale_size_identity() +
guides(colour = guide_legend(override.aes = list(size=10)))
#grouping the data by the date
per_day = accidents.new %>% group_by(accident_year, accident_month, accident_day, day_in_week_hebrew) %>% summarize(total = sum(X))
# Density plots with semi-transparent fill
ggplot(per_day, aes(x=total))+
#histogram
geom_histogram(aes(x=total, y=..density.., fill="Histogram"),colour="grey30", bins=19) +
#density of the distribution
geom_density(aes(fill="Simulated Density"), alpha=.5, color = "navyblue") +
#normal curve
stat_function(aes(color = "Normal Curve"), fun = dnorm, args = list(mean = mean(per_day$total), sd = sd(per_day$total)), size=1.2) +
#some designing
ggtitle("Number of car accidents a day in Tel-Aviv between 2013 - 2018",subtitle = "Density, Histogram and Normal Dist.") +
coord_cartesian(xlim = c(-2,37)) + scale_fill_manual(values = c("grey80","navy")) + theme_minimal() + labs(fill = "Simulated", colour="Normal Distribution")
#qqplot
qqnorm(y=per_day$total)
#qqline
qqline(per_day$total)
#filter by sundays.
per_sunday = per_day %>% filter(day_in_week_hebrew=="ראשון")
interquantile_range = function(x){
x = as.matrix(x)
#calculate the distance between 3rd and 1st quantiles
sort(x)[length(x)*0.75] - sort(x)[length(x)*0.25]
}
interquantile_range(per_sunday$total)
#filter the accident of friday and arrange them
per_friday = per_day %>% filter(day_in_week_hebrew=="שישי") %>% arrange(total)
#this function get a number of reps and for each iteration samples
#from fridays and sundays accidents and check what is the probabillity that there
#are more accidents on friday than on sunday
#int B - number of reps
#return list with sd and probabillity estimator.
mc_friday_vs_sunday = function(B){
#helper function to calculate a boolean vector
#of the friday "wins" aginst sunday
result_vector_helper = function(b){
#empty vector
result_vec = c()
#for B times check who "wins" and add to the vector
for (i in 1:b){
result_vec = c(result_vec ,sample(per_sunday$total, 1) < sample(per_friday$total, 1))}
return(result_vec)
}
p.hats = c()
#calculate the mean of the monte carlo experiment
for(i in 1:100){
result_vec = result_vector_helper(B)
p.hats = c(p.hats, mean(result_vec))
#calculate sd/10 because it's an sd of the average, var(x.gag) = (1/n)*var(x), and sd is the root.
}
result_list = list("p.hat" = mean(p.hats), "sd" = sd(p.hats))
return(result_list)
}
#the result list
estimator_list = mc_friday_vs_sunday(10000)
#the probabillity estimator
mu = estimator_list$p.hat
#the standart deviation
s = estimator_list$sd
estimator_list
#create the t estimator
t_estimator = replicate(200, t.test(sample(per_sunday$total, 9), sample(per_friday$total, 9), alternative = "greater")$p.value<0.05)
#print the results
print(paste0("Power estimator:" ,mean(t_estimator)))
print(paste0("Standart Deviation:" ,sd(t_estimator)))
#grouping by types
types = accidents.new %>% group_by(accident_year, accident_type_hebrew) %>% summarise(total = sum(X)) %>% filter(total>50)
#create the yearly ratio from the counting of accidents
for (i in 2013:2018){
types[which(types$accident_year==i),3] = types[which(types$accident_year==i),3]/sum(types$total[types$accident_year==i])
}
#show the plot
ggplot(data = types, aes(x=accident_year, y=total, colour=accident_type_hebrew)) + geom_line(size=2) + ggtitle("Accident types precent along the years") + xlab("Years") + ylab("Yearly type rate")
side_accidents = accidents.new %>% filter(accident_type_hebrew == "התנגשות צד בצד")
side_accidents %>% group_by(day_night_hebrew) %>% summarise(total = sum(X)) %>%
ggplot(aes(x = "", y = total, fill = day_night_hebrew)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) + theme_void() + guides(fill=guide_legend(title="Legend"))
side_accidents %>% group_by(road_width_hebrew) %>% summarise(total = sum(X)) %>% filter(str_detect(road_width_hebrew,"")) %>%
ggplot(aes(x = "", y = total, fill = road_width_hebrew)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) + theme_void() + guides(fill=guide_legend(title="Legend"))
side_accidents %>% group_by(road_surface_hebrew) %>% summarise(total = sum(X)) %>%  filter(!str_detect(road_surface_hebrew,"לא ידוע")) %>%
ggplot(aes(x = "", y = total, fill = road_surface_hebrew)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) + theme_void() + guides(fill=guide_legend(title="Legend"))
side_accidents %>% group_by(weather_hebrew) %>% summarise(total = sum(X)) %>%  filter(!str_detect(weather_hebrew,"לא ידוע")) %>%
ggplot(aes(x = "", y = total, fill = weather_hebrew)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) + theme_void() + guides(fill=guide_legend(title="Legend"))
#check how many values from each
as.data.frame(table(accidents.new$day_night_hebrew))
#magic numbers constants
DAY_ACC = 24015
NIGHT_ACC = 8722
#create the yearly count table, we will use it
yearly = spread(accidents.new %>% group_by(accident_year) %>% summarise(total = sum(X)),key=accident_year, value=total)
#grouping by day/night and year
day_night_history = accidents.new %>% group_by(day_night_hebrew, accident_year) %>% summarise(total = sum(X))
#creating a yearly rate for each type
for(i in 1:nrow(day_night_history)){
day_night_history[i, "yearly"] = yearly[as.character(day_night_history[i, "accident_year"])]
}
#add the rate
day_night_history$rate = day_night_history$total/day_night_history$yearly
#show the plot
ggplot(data = day_night_history, aes(x=accident_year, y=rate, color = day_night_hebrew)) + geom_line() + ggtitle("Changing in Day/Night Accidents Precent") + xlab("Year") + ylab("Yearly Precent")
#create grouping by the day vs the night
day_night_pedes = accidents.new %>% group_by(day_night_hebrew, pedestrian_involved) %>% summarise(total = sum(X))
day_night_pedes$total = ifelse(day_night_pedes$day_night_hebrew=="יום",day_night_pedes$total/DAY_ACC, day_night_pedes$total/NIGHT_ACC)
#plot
ggplot(data = day_night_pedes, aes(x=pedestrian_involved, y=total, fill=pedestrian_involved)) + geom_bar(stat = "identity")  + xlab("Year") + ylab("Pedestrian Involvment precentage")+facet_wrap(.~day_night_hebrew) + geom_text(aes(label=round(total,3)), vjust=2, color="white",
position = position_dodge(1), size=4 ) + theme(axis.text.x = element_text(angle=45, vjust = 0.5))
day_night_types = accidents.new %>% group_by(day_night_hebrew, accident_type_hebrew) %>% summarise(total = sum(X))
day_night_types$total = ifelse(day_night_types$day_night_hebrew=="יום",day_night_types$total/DAY_ACC, day_night_types$total/NIGHT_ACC)
ggplot(data = day_night_types, aes(x=accident_type_hebrew, y=total, group = day_night_hebrew, fill=accident_type_hebrew)) + geom_bar(stat = "identity") + facet_wrap(.~day_night_hebrew) + theme(axis.text.x = element_text(angle=90, size=10)) + xlab("Accident Types") + ylab("Precentage of DayTime") + guides(fill=guide_legend(title="Accident Type"))
library(ggplot2)
library(cowplot)
install.packages("cowplot")
library(cowplot)
iris1 <- ggplot(data, aes(x = name, y = ME)) +geom_bar() + theme_bw()
iris1 = ggplot(df, aes(x = name, y = ME)) +geom_bar() + theme_bw()
iris1 = ggplot(df, aes(x = name, y = ME))
df = read.csv("me_vs"we.csv)
df = read.csv("me_vs_we".csv)
iris1 = ggplot(df, aes(x = name, y = ME)) + geom_bar() + theme_bw()
df = read.csv("me_vs_we.csv")
setwd("C:\\Users\\Liav\\PycharmProjects\\twitter")
df = read.csv("me_vs_we.csv")
iris1 = ggplot(df, aes(x = name, y = ME)) + geom_bar() + theme_bw()
iris_1
iris1 = ggplot(df, aes(x = name, y = ME)) + geom_bar() + theme_bw()
iris1
iris1 = ggplot(df, aes(x = name, y = ME)) + geom_bar(stat = 'identity') + theme_bw()
iris1
iris1 = ggplot(df, aes(x = name, y = ME)) + geom_bar(stat = 'identity') + theme(axis.text.x = element_text(angle = 90)).
iris1
iris1 = ggplot(df, aes(x = name, y = ME)) + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90))
iris1
iris2 = ggplot(df, aes(x = name, y = WE)) + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90))
iris2
iris2
plot_grid(iris1, iris2, labels = "AUTO")
#dplyr is a fast, consistent tool for working with data frame like objects, both in memory and out of memory.
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
#stringr is a library with pattern matching functions. These recognise four engines of pattern description. The most common is regular expressions.
library(stringr)
#dplyr is a fast, consistent tool for working with data frame like objects, both in memory and out of memory.
library(dplyr)
#ggplot is a system for 'declaratively' creating graphics, based on "The Grammar of Graphics". You provide the data, tell 'ggplot2' how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.
library(ggplot2)
#An evolution of 'reshape2'. It's designed specifically for data tidying (not general reshaping or aggregating) and works well with 'dplyr' data pipelines.
library(tidyr)
#Set the seed of R‘s random number generator, which is useful for creating simulations or random objects that can be reproduced.
set.seed(23)
#reading the file with UTF-8 encoding
accidents = read.csv("accidents.csv", encoding = "UTF-8")
#peek the first rows of our data
head(accidents, 1)
knitr::opts_chunk$set(echo = TRUE)
#stringr is a library with pattern matching functions. These recognise four engines of pattern description. The most common is regular expressions.
library(stringr)
#dplyr is a fast, consistent tool for working with data frame like objects, both in memory and out of memory.
library(dplyr)
#ggplot is a system for 'declaratively' creating graphics, based on "The Grammar of Graphics". You provide the data, tell 'ggplot2' how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.
library(ggplot2)
#An evolution of 'reshape2'. It's designed specifically for data tidying (not general reshaping or aggregating) and works well with 'dplyr' data pipelines.
library(tidyr)
#Set the seed of R‘s random number generator, which is useful for creating simulations or random objects that can be reproduced.
set.seed(23)
#reading the file with UTF-8 encoding
accidents = read.csv("accidents.csv", encoding = "UTF-8")
#peek the first rows of our data
head(accidents, 1)
#sum the duplications in id columns
sum(duplicated(accidents$id))
#create a table of the number of duplicated id's
table(accidents$id[which(duplicated(accidents$id))])
#What is the maximum value ?
max(table(accidents$id[which(duplicated(accidents$id))]))
#remove the indices of rows that are duplicated
accidents.new = accidents[-which(duplicated((accidents$id))),]
#X was redundant, so i will use it for counting. explained later.
accidents.new$X = 1
time_verify <- function(record){
#magic number variable
FIFTEEN_MINUTES = 15
#a regex to find if time is from the wanted pattern
time_pattern = "^(([0-1][0-9]|2[0-3]):[0-5][0-9])-(([0-1][0-9]|2[0-3]):[0-5][0-9]$)"
#if time from correct pattern
if(str_detect(record, time_pattern)){
#split for the two times
time_lst = str_split(record,"-",2,TRUE)
#using strptime R function to get the the string as time
earlier = strptime(time_lst[1], "%H:%M")
later = strptime(time_lst[2], "%H:%M")
#use the difftime R function to check if time is fifteen minutes
#since we include the last minute but arithmetics calculation is not, we add an extra minute.
return(as.numeric(difftime(later, earlier, units = c("mins")))+1==FIFTEEN_MINUTES)
}
#if time not from correct pattern
else{
return(FALSE)
}
}
#show the rows that aren't passing the correctness filter
check = accidents.new[which(!sapply(accidents.new$accident_hour, time_verify)),]
#remove hashtag to enable the following row
#View(accidents.new)
#for each row index
for(i in (1:nrow(accidents.new))){
#pattern spliting
hour_str = str_match(accidents.new[i,"accident_hour"],"([0-1][0-9]|2[0-3]):([0-5][0-9])-([0-1][0-9]|2[0-3]):([0-5][0-9]$)")
#if the time is correct by the rules of the previous question, add the hour and minutes to a new column
if (time_verify(accidents.new[i, "accident_hour"])){
accidents.new[i,"hour"] = hour_str[2]
accidents.new[i,"minutes"] = hour_str[3]
}
else{
accidents.new[i,"hour"] = NA
accidents.new[i,"minutes"] = NA
}
}
#reorder the columns so the new columns will be right after the hours
accidents.new = cbind(accidents.new[,1:64],accidents.new$hour, accidents.new$minutes,accidents.new[,65:68])
#change the colnames for the right record
colnames(accidents.new)[65:66] = c("hour","minutes")
accidents.new[c(45:54),which(colnames(accidents.new) %in% c("accident_hour", "hour", "minutes"))]
#create a vector of the values we need
serious_values = c("קשה","קטלנית")
#filter by that vector
serious_accidents = accidents.new[which(accidents.new$accident_severity %in% serious_values),]
#make a table of the data
table(serious_accidents$accident_year)
#a stacked bar plot
#create a totals table helper for the lables of the ggplot
totals <- serious_accidents %>% group_by(accident_year) %>% summarize(total = sum(X))
#create a ggplot and a gghistogram
g = ggplot(serious_accidents, aes(x=accident_year, fill=accident_severity)) +
geom_histogram(bins=11) +  scale_x_continuous("Year", labels = as.character(serious_accidents$accident_year), breaks =serious_accidents$accident_year)
#print the plot with lables and additions
g + theme(axis.text.x = element_text(angle=0, vjust=1)) + ggtitle("Serious Accidents Per Year") + guides(fill=guide_legend(title="Severity")) +
#the white lables of groups
geom_text(stat='count', aes(label=..count..), colour = "white", position = position_stack(vjust = 0.5), size=4)+
#the black sum lables
geom_text(aes(accident_year, total + 10, label = total, fill = NULL), size = 5, data = totals)
#add split variable
serious_accidents[,"pedestrian_involved"] =  ifelse(serious_accidents$accident_type_hebrew == "פגיעה בהולך רגל","Pedestrian Involved","No Pedestrians Involved")
#create the pedestrians data frame
pedestrians <- serious_accidents %>% group_by(accident_year,accident_severity, pedestrian_involved) %>% summarize(total = sum(X))
#create the ggplot
p = ggplot(pedestrians, aes(x=accident_year,y=total, fill=accident_severity)) +  geom_bar(stat = "identity", position = "dodge") +
#split by pedestrians involvment and scaling axis
facet_wrap(.~pedestrian_involved) + scale_x_continuous("Year", labels = as.character(pedestrians$accident_year), breaks =pedestrians$accident_year) + scale_y_continuous("Year") +
#designing the graph a bit
theme(title = element_text(size=20), strip.text = element_text(size=15, color="grey3"), axis.text = element_text(size =15), axis.title = element_text(size=15), legend.text=element_text(size=15))+
geom_text(aes(label=total), vjust=-0.5, color="black",
position = position_dodge(1), size=4) + theme(axis.text.x = element_text(angle=0, vjust=1)) + ggtitle("Serious Accidents Per Year") + guides(fill=guide_legend(title="Severity"), size=10)
#print the plot in a big resolution
p
#create an is_pedestrian_involved column
accidents.new$pedestrian_involved =  ifelse(accidents.new$accident_type_hebrew == "פגיעה בהולך רגל","Pedestrian Involved","No Pedestrians Involved")
#create a table of pedestrians-involved accidents by streets
streets_pedestrians = accidents.new %>%  group_by(street1_hebrew) %>% summarize(total = sum(ifelse(pedestrian_involved=="Pedestrian Involved",1,0)))
#sum the total accidents on each street
streets = accidents.new %>%  group_by(street1_hebrew) %>% summarize(total = sum(X))
#merge tables
streets_merged = merge(streets, streets_pedestrians, by = "street1_hebrew")
#fix colnames
colnames(streets_merged) = c("street","accidents", "pedestrian_accidents")
#filter the below 100 total accidents
streets_merged_over_100 = filter(streets_merged, accidents>100)
#create ratio column
streets_merged_over_100$ratio = streets_merged_over_100$pedestrian_accidents/streets_merged_over_100$accidents
#find the maximum ratio street
max_ratio_road = streets_merged_over_100[which.max(streets_merged_over_100$ratio),1]
#create the plot using dplyr for building the legend
accidents %>% mutate(color = ifelse(street1_hebrew==max_ratio_road, "highest pedestrians accident ratio road", ifelse(accident_severity =="קטלנית", 'תאונה קטלנית', 'תאונה'))) %>%
ggplot(aes(x=longitude, y=latitude, size = ifelse(street1_hebrew==max_ratio_road , 2  ,ifelse(accident_severity == "קטלנית",3.5,1)) ,color=color)) + geom_point(alpha=0.6) +
theme_light() + theme(legend.position = "bottom", title=element_text(size=20),axis.text = element_text(size=15), legend.text = element_text(size=20)) +
ggtitle("Accidents Across Tel Aviv") + scale_color_manual(values = c("blue","grey50","red")) +scale_size_identity() +
guides(colour = guide_legend(override.aes = list(size=10)))
#grouping the data by the date
per_day = accidents.new %>% group_by(accident_year, accident_month, accident_day, day_in_week_hebrew) %>% summarize(total = sum(X))
# Density plots with semi-transparent fill
ggplot(per_day, aes(x=total))+
#histogram
geom_histogram(aes(x=total, y=..density.., fill="Histogram"),colour="grey30", bins=19) +
#density of the distribution
geom_density(aes(fill="Simulated Density"), alpha=.5, color = "navyblue") +
#normal curve
stat_function(aes(color = "Normal Curve"), fun = dnorm, args = list(mean = mean(per_day$total), sd = sd(per_day$total)), size=1.2) +
#some designing
ggtitle("Number of car accidents a day in Tel-Aviv between 2013 - 2018",subtitle = "Density, Histogram and Normal Dist.") +
coord_cartesian(xlim = c(-2,37)) + scale_fill_manual(values = c("grey80","navy")) + theme_minimal() + labs(fill = "Simulated", colour="Normal Distribution")
#qqplot
qqnorm(y=per_day$total)
#qqline
qqline(per_day$total)
#filter by sundays.
per_sunday = per_day %>% filter(day_in_week_hebrew=="ראשון")
interquantile_range = function(x){
x = as.matrix(x)
#calculate the distance between 3rd and 1st quantiles
sort(x)[length(x)*0.75] - sort(x)[length(x)*0.25]
}
interquantile_range(per_sunday$total)
#filter the accident of friday and arrange them
per_friday = per_day %>% filter(day_in_week_hebrew=="שישי") %>% arrange(total)
#this function get a number of reps and for each iteration samples
#from fridays and sundays accidents and check what is the probabillity that there
#are more accidents on friday than on sunday
#int B - number of reps
#return list with sd and probabillity estimator.
mc_friday_vs_sunday = function(B){
#helper function to calculate a boolean vector
#of the friday "wins" aginst sunday
result_vector_helper = function(b){
#empty vector
result_vec = c()
#for B times check who "wins" and add to the vector
for (i in 1:b){
result_vec = c(result_vec ,sample(per_sunday$total, 1) < sample(per_friday$total, 1))}
return(result_vec)
}
p.hats = c()
#calculate the mean of the monte carlo experiment
for(i in 1:100){
result_vec = result_vector_helper(B)
p.hats = c(p.hats, mean(result_vec))
#calculate sd/10 because it's an sd of the average, var(x.gag) = (1/n)*var(x), and sd is the root.
}
result_list = list("p.hat" = mean(p.hats), "sd" = sd(p.hats))
return(result_list)
}
#the result list
estimator_list = mc_friday_vs_sunday(10000)
#the probabillity estimator
mu = estimator_list$p.hat
#the standart deviation
s = estimator_list$sd
estimator_list
#create the t estimator
t_estimator = replicate(200, t.test(sample(per_sunday$total, 9), sample(per_friday$total, 9), alternative = "greater")$p.value<0.05)
#print the results
print(paste0("Power estimator:" ,mean(t_estimator)))
print(paste0("Standart Deviation:" ,sd(t_estimator)))
#grouping by types
types = accidents.new %>% group_by(accident_year, accident_type_hebrew) %>% summarise(total = sum(X)) %>% filter(total>50)
#create the yearly ratio from the counting of accidents
for (i in 2013:2018){
types[which(types$accident_year==i),3] = types[which(types$accident_year==i),3]/sum(types$total[types$accident_year==i])
}
#show the plot
ggplot(data = types, aes(x=accident_year, y=total, colour=accident_type_hebrew)) + geom_line(size=2) + ggtitle("Accident types precent along the years") + xlab("Years") + ylab("Yearly type rate")
side_accidents = accidents.new %>% filter(accident_type_hebrew == "התנגשות צד בצד")
side_accidents %>% group_by(day_night_hebrew) %>% summarise(total = sum(X)) %>%
ggplot(aes(x = "", y = total, fill = day_night_hebrew)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) + theme_void() + guides(fill=guide_legend(title="Legend"))
side_accidents %>% group_by(road_width_hebrew) %>% summarise(total = sum(X)) %>% filter(str_detect(road_width_hebrew,"")) %>%
ggplot(aes(x = "", y = total, fill = road_width_hebrew)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) + theme_void() + guides(fill=guide_legend(title="Legend"))
side_accidents %>% group_by(road_surface_hebrew) %>% summarise(total = sum(X)) %>%  filter(!str_detect(road_surface_hebrew,"לא ידוע")) %>%
ggplot(aes(x = "", y = total, fill = road_surface_hebrew)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) + theme_void() + guides(fill=guide_legend(title="Legend"))
side_accidents %>% group_by(weather_hebrew) %>% summarise(total = sum(X)) %>%  filter(!str_detect(weather_hebrew,"לא ידוע")) %>%
ggplot(aes(x = "", y = total, fill = weather_hebrew)) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0) + theme_void() + guides(fill=guide_legend(title="Legend"))
#check how many values from each
as.data.frame(table(accidents.new$day_night_hebrew))
#magic numbers constants
DAY_ACC = 24015
NIGHT_ACC = 8722
#create the yearly count table, we will use it
yearly = spread(accidents.new %>% group_by(accident_year) %>% summarise(total = sum(X)),key=accident_year, value=total)
#grouping by day/night and year
day_night_history = accidents.new %>% group_by(day_night_hebrew, accident_year) %>% summarise(total = sum(X))
#creating a yearly rate for each type
for(i in 1:nrow(day_night_history)){
day_night_history[i, "yearly"] = yearly[as.character(day_night_history[i, "accident_year"])]
}
#add the rate
day_night_history$rate = day_night_history$total/day_night_history$yearly
#show the plot
ggplot(data = day_night_history, aes(x=accident_year, y=rate, color = day_night_hebrew)) + geom_line() + ggtitle("Changing in Day/Night Accidents Precent") + xlab("Year") + ylab("Yearly Precent")
#create grouping by the day vs the night
day_night_pedes = accidents.new %>% group_by(day_night_hebrew, pedestrian_involved) %>% summarise(total = sum(X))
day_night_pedes$total = ifelse(day_night_pedes$day_night_hebrew=="יום",day_night_pedes$total/DAY_ACC, day_night_pedes$total/NIGHT_ACC)
#plot
ggplot(data = day_night_pedes, aes(x=pedestrian_involved, y=total, fill=pedestrian_involved)) + geom_bar(stat = "identity")  + xlab("Year") + ylab("Pedestrian Involvment precentage")+facet_wrap(.~day_night_hebrew) + geom_text(aes(label=round(total,3)), vjust=2, color="white",
position = position_dodge(1), size=4 ) + theme(axis.text.x = element_text(angle=45, vjust = 0.5))
day_night_types = accidents.new %>% group_by(day_night_hebrew, accident_type_hebrew) %>% summarise(total = sum(X))
day_night_types$total = ifelse(day_night_types$day_night_hebrew=="יום",day_night_types$total/DAY_ACC, day_night_types$total/NIGHT_ACC)
ggplot(data = day_night_types, aes(x=accident_type_hebrew, y=total, group = day_night_hebrew, fill=accident_type_hebrew)) + geom_bar(stat = "identity") + facet_wrap(.~day_night_hebrew) + theme(axis.text.x = element_text(angle=90, size=10)) + xlab("Accident Types") + ylab("Precentage of DayTime") + guides(fill=guide_legend(title="Accident Type"))
library(reshape2)
library(reshape2)
df.long<-melt(df)
df.long
df = read.csv("me_vs_we.csv")
df.long<-melt(df)
df.long
library(dplyr)
df %>% melt(df) %>% ggplot(aes(name,value,fill=variable))+
geom_bar(stat="identity",position="dodge")
ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat="identity",position="dodge")
ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat="identity",position="dodge") +  theme(axis.text.x)
ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat="identity",position="dodge") + theme(axis.text.x = element_text(angle = 90))
ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(width=0.4, position = position_dodge(width=0.5))+ theme(axis.text.x = element_text(angle = 90))
ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.4, position = position_dodge(width=0.5))+ theme(axis.text.x = element_text(angle = 90))
ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.4, position = position_dodge(width=0.9))+ theme(axis.text.x = element_text(angle = 90))
ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.1, position = position_dodge(width=0.9))+ theme(axis.text.x = element_text(angle = 90))
ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.1, position = position_dodge(width=0.2))+ theme(axis.text.x = element_text(angle = 90))
ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.1, position = position_dodge(width=0.4))+ theme(axis.text.x = element_text(angle = 90))
ggsave(g, 1800, 4000)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.1, position = position_dodge(width=0.4))+ theme(axis.text.x = element_text(angle = 90))
ggsave(g, 1800, 4000)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.1, position = position_dodge(width=0.4))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave(1800, 4000)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.1, position = position_dodge(width=0.4))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave('f.png', 1800, 4000)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.1, position = position_dodge(width=0.4))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave('f.png', 1800, 4000)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.1, position = position_dodge(width=0.4))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave("mtcars.png", width = 4, height = 4)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.1, position = position_dodge(width=0.4))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave("mtcars.png", width = 15, height = 4)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.8, position = position_dodge(width=0.4))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave("mtcars.png", width = 15, height = 4)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.8, position = position_dodge(width=0.25))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave("mtcars.png", width = 15, height = 4)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.8, position = position_dodge(width=0.7))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave("mtcars.png", width = 15, height = 4)
df = read.csv("me_vs_we.csv")
df.long = melt(df)
df.long = melt(df)
df
df = read.csv("me_vs_we.csv")
df
df.long = melt(df)
df.long
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.8, position = position_dodge(width=0.7))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave("mtcars.png", width = 15, height = 4)
df = read.csv("me_vs_we.csv")
df.long = melt(df)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.8, position = position_dodge(width=0.7))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave("mtcars.png", width = 15, height = 4)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.4, position = position_dodge(width=0.7))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave("mtcars.png", width = 15, height = 4)
g = ggplot(df.long,aes(name,value,fill=variable))+
geom_bar(stat='identity', width=0.8, position = position_dodge(width=0.7))+ theme(axis.text.x = element_text(angle = 90)) +
ggsave("mtcars.png", width = 15, height = 4)
