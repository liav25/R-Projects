knitr::opts_chunk$set(echo = TRUE)
#ggplot2 is used to make plots
library(ggplot2)
#library stringr is used for regex
library(stringr)
#tidyr for different dataframe methods
library(tidyr)
#coloring
library(RColorBrewer)
#for using pipes
library(dplyr)```
knitr::opts_chunk$set(echo = TRUE)
#ggplot2 is used to make plots
library(ggplot2)
#library stringr is used for regex
library(stringr)
#tidyr for different dataframe methods
library(tidyr)
#coloring
library(RColorBrewer)
#for using pipes
library(dplyr)
data <- readLines("parsing_gap_minder_messy.txt" )
head(data)
#these is our pattern
contintens = "Africa|Europe|Americas|Asia|Oceania"
#againg same method
data_cont = data_cap[str_which(data, contintens)]
#save all places in data which start with capital Letter from A-Z
data_cap = data[str_which(data, "^[A-Z]")]
#these is our pattern
contintens = "Africa|Europe|Americas|Asia|Oceania"
#againg same method
data_cont = data_cap[str_which(data, contintens)]
#extract all countries
countries = str_extract(data_cont, "[A-Z][a-z]+[A-Z]?[a-z]*[A-Z]?[a-z]*")
#extract all years
years = str_extract(data_cont, "[0-9]{4}")
#extract all populations
pop = str_sub(str_extract(data_cont, "[0-9]+"),4)
#extract all continents
x = str_extract_all(data_cont, "[A-Z][a-z]+[A-Z]?[a-z]*[A-Z]?[a-z]*")
continent <- vapply(x, tail, n = 1L, FUN.VALUE = character(1))
#extract all lifeExp
lifeExp = str_extract(data_cont,"(?<=[a-z])\\d*[:punct:]\\d*(?=G)")
#extract all gdp
gdp = str_extract(data_cont,"(?<=G)\\d*[:punct:]*\\d*")
df = as.data.frame(cbind(countries, years, pop, continent, lifeExp,gdp))
View(df)
#extract all countries
countries = str_extract(data_cont, "[A-Z][a-z]+[A-Z]?[a-z]*[A-Z]?[a-z]*-?,?'?")
ptrn =
#extract all years
years = str_extract(data_cont, "[0-9]{4}")
#extract all populations
pop = str_sub(str_extract(data_cont, "[0-9]+"),4)
#extract all continents
x = str_extract_all(data_cont, "[A-Z][a-z]+[A-Z]?[a-z]*[A-Z]?[a-z]*")
continent <- vapply(x, tail, n = 1L, FUN.VALUE = character(1))
#extract all lifeExp
lifeExp = str_extract(data_cont,"(?<=[a-z])\\d*[:punct:]\\d*(?=G)")
#extract all gdp
gdp = str_extract(data_cont,"(?<=G)\\d*[:punct:]*\\d*")
#extract all countries
countries = str_extract(data_cont, "[A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[A-Z]?[a-z]*)
ptrn =
#extract all years
years = str_extract(data_cont, "[0-9]{4}")
#extract all countries
countries = str_extract(data_cont, "[A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[A-Z]?[a-z]*)
#extract all years
years = str_extract(data_cont, "[0-9]{4}")
#extract all countries
countries = str_extract(data_cont, "[A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[A-Z]?[a-z]*")
#extract all years
years = str_extract(data_cont, "[0-9]{4}")
#extract all populations
pop = str_sub(str_extract(data_cont, "[0-9]+"),4)
#extract all continents
x = str_extract_all(data_cont, "[A-Z][a-z]+[A-Z]?[a-z]*[A-Z]?[a-z]*")
continent <- vapply(x, tail, n = 1L, FUN.VALUE = character(1))
#extract all lifeExp
lifeExp = str_extract(data_cont,"(?<=[a-z])\\d*[:punct:]\\d*(?=G)")
#extract all gdp
gdp = str_extract(data_cont,"(?<=G)\\d*[:punct:]*\\d*")
df = as.data.frame(cbind(countries, years, pop, continent, lifeExp,gdp))
head(df)
View(df)
try = str_match(data_cont, ptrn)
View(try)
ptrn = ("([A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[A-Z]?[a-z]*)(\\d{4})(\\d*.\\d*)G(\\d*.\\d*)$")
try = str_match(data_cont, ptrn)
View(try)
ptrn = "([A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[A-Z]?[a-z]*)(\\d{4})(\\d*.\\d*)G(\\d*.\\d*)"
try = str_match(data_cont, ptrn)
ptrn = "^([A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[A-Z]?[a-z]*)(\\d{4})(\\d*.\\d*)G(\\d*.\\d*)"
try = str_match(data_cont, ptrn)
ptrn = "([A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[A-Z]?[a-z]*)(\\d{4})(\\d*.\\d*)G(\\d*.\\d*)$"
try = str_match(data_cont, ptrn)
pattern = "([A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[a-z]*[A-Z]?[a-z]*)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
pattern
#extract all years
years = str_extract(data_cont, "[0-9]{4}")
#extract all populations
pop = str_sub(str_extract(data_cont, "[0-9]+"),4)
#extract all continents
x = str_extract_all(data_cont, "[A-Z][a-z]+[A-Z]?[a-z]*[A-Z]?[a-z]*")
continent <- vapply(x, tail, n = 1L, FUN.VALUE = character(1))
ptrnn = "([A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[a-z]*[A-Z]?[a-z]*)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
ptrn = "([A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[a-z]*[A-Z]?[a-z]*)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
str_match(data_cont,ptrn)
dat1 = str_match(data_cont,ptrn)
dat1
View(as.data.frame(dat1))
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:ncol(as.data.frame(str_match(data_cont,ptrn))]
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:ncol(as.data.frame(str_match(data_cont,ptrn))]
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
ptrn = "([A-Z][a-z]+,?'?-?[A-Z]?[a-z]*[a-z]*[A-Z]?[a-z]*)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
ptrn = "([A-Z][a-z]+,?'?-?[a-zA-Z]*[a-z]*[a-z]*[A-Z]?[a-z]*)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
ptrn = "([A-Z][a-z]+,?'?-?[a-zA-Z]?[a-z]*[A-Z]?[a-z]*)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
ptrn = "([A-Z][a-z]+,?'?-?[a-zA-Z]?[a-z]?[A-Z]?[a-z]?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
ptrn = "([A-Z][a-z]+,?'?-?[A-Z]+[a-z]?[A-Z]+[a-z]?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
ptrn = "([A-Z][a-z]+,?'?-?[A-Z]?[a-z]?[A-Z]?[a-z]?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
check = data_cont[1701]
check
check = data_cont[329]
check
View(data_cont)
ptrn = "([A-Z][a-z]+,?'?-?[A-Z]?[a-z]?,?'?-?[A-Z]?[a-z]?,?'?-?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
str_match(check,ptrn)
ptrn = "([A-Z][a-z]+,?'?-?[A-Z]?[a-z]?[A-Z]?[a-z]?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
str_match(check,ptrn)
check
check[1]
check = "Congo,Dem.Rep.197223007669Africa45.98900G904.8960685"
str_match(check,ptrn)
ptrn = "([A-Z][a-z]+)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
str_match(check,ptrn)
ptrn = "([A-Z][a-z]+,?'?-?[A-Z]?[a-z]?,?'?-?[A-Z]?[a-z]?,?'?-?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
check = data_cont[329]
check
str_match(data_,ptrn)
str_match(check,ptrn)
check = data_cont[1]
check
str_match(check,ptrn)
check = data_cont[335]
check
str_match(check,ptrn)
check
ptrn = "([A-Z][a-z]+,?'?-?[A-Z]?[a-z]?,?'?-?[A-Z]?[a-z]?,?'?-?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
str_extract(check,ptrn)
ptrn = "([A-Z][a-z]+,?'?-?[a-zA-Z]?[a-z]?,?'?-?[a-zA-Z]?[A-za-z]?,?'?-?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
ptrn = "([A-Z][a-z]+,?'?-?[a-zA-Z]?[a-z]?,?'?-?[a-zA-Z]?[A-za-z]?,?'?-?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
check
ptrn = "([A-Z][a-z]+,+'?-?[a-zA-Z]?[a-z]?,?'?-?[a-zA-Z]?[A-za-z]?,?'?-?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
ptrn = "([A-Z][a-z]+,+'?-?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
ptrn = "([A-Z][a-z]+,?'?-?.?[A-Z]?[a-z]?.?,?'?-?[A-Z]?[a-z]?.?,?'?-?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
ptrn = "([A-Z][a-z]+[:punct:]?[A-Z]?[a-z]*[:punct:]?[A-Z]?[a-z]*[:punct:]?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
dat1 = as.data.frame(str_match(data_cont,ptrn))[2:7]
View(dat1)
colnames(parsed_data) = c("Country","Year","Population","Continent","LifeExp","GDP")
View(data_cont)
#extract all countries
countries = str_extract(data_cont, "[A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[A-Z]?[a-z]*")
ptrn = "([A-Z][a-z]+[:punct:]?[A-Z]?[a-z]*[:punct:]?[A-Z]?[a-z]*[:punct:]?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
parsed_data = as.data.frame(str_match(data_cont,ptrn))[2:7]
colnames(parsed_data) = c("Country","Year","Population","Continent","LifeExp","GDP")
View(data_cont)
#extract all countries
countries = str_extract(data_cont, "[A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[A-Z]?[a-z]*")
ptrn = "([A-Z][a-z]+[:punct:]?[A-Z]?[a-z]*[:punct:]?[A-Z]?[a-z]*[:punct:]?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
parsed_data = as.data.frame(str_match(data_cont,ptrn))[2:7]
colnames(parsed_data) = c("Country","Year","Population","Continent","LifeExp","GDP")
#extract all countries
countries = str_extract(data_cont, "[A-Z][a-z]+-?,?'?[A-Z]?[a-z]*[A-Z]?[a-z]*")
ptrn = "([A-Z][a-z]+[:punct:]?[A-Z]?[a-z]*[:punct:]?[A-Z]?[a-z]*[:punct:]?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
parsed_data = as.data.frame(str_match(data_cont,ptrn))[2:7]
colnames(parsed_data) = c("Country","Year","Population","Continent","LifeExp","GDP")
ptrn = "([A-Z][a-z]+[:punct:]?[A-Z]?[a-z]*[:punct:]?[A-Z]?[a-z]*[:punct:]?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
parsed_data = as.data.frame(str_match(data_cont,ptrn))[2:7]
colnames(parsed_data) = c("Country","Year","Population","Continent","LifeExp","GDP")
head(parsed_data)
ptrn = "([A-Z][a-z]+[:punct:]?[A-Z]?[a-z]*[:punct:]?[A-Z]?[a-z]*[:punct:]?)([12][0-9]{3})(\\d*)([A-Z][a-z]+)(\\d*.\\d*)G(\\d*.\\d*)"
parsed_data = as.data.frame(str_match(data_cont,ptrn))[2:7]
colnames(parsed_data) = c("Country","Year","Population","Continent","LifeExp","GDP")
head(parsed_data)
knitr::opts_chunk$set(echo = TRUE)
#ggplot2 is used to make plots
library(ggplot2)
#library stringr is used for regex
library(stringr)
#tidyr for different dataframe methods
library(tidyr)
#coloring
library(RColorBrewer)
#for using pipes
library(dplyr)
head(parsed_data)
shiny::runApp()
path = "C:\Users\Liav\Desktop\Uni\Data\name_graph\NationalNames.csv"
path = "C:\\Users\\Liav\\Desktop\\Uni\\Data\\name_graph\\NationalNames.csv"
names <- read.csv ("NationalNames.csv")
head(names)
names <- read.csv (path)
head(names)
